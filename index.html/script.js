'use strict';

(function (window) {

  //solution de Remy Portier de Fcc
  //function convertToRoman(num) {
  //var nums = num;
  //var result = "";
  //var convey = [];
  //var index = [1,4,5,9,10,40,50,90,100,400,500,900,1000];
  //var romans =['I','IV','V','IX','X','XL','L','XC','C','CD','D','CM','M'];

  //(function iterator() {
  //for (var i = index.length; i >= 0; i--) {
  //if(nums > 0) {
  //if(nums >= index[i]) {
  //result += romans[i];
  //nums -= index[i];
  //iterator();
  //}
  //}
  //}
  //})();
  //return result;
  //}

  convertToRoman(68);

  //num, arrRoman[j].key, arrRoman[j].valeur
  //function oneNumber(num, obj, whichArray) {
  ////loop in the array
  //for (let j = 0; j < obj.length; j++) {
  ////console.log(obj[j].key +' : '+ obj[j].valeur+' : '+j+' : '+num);
  //if (obj[j].key == num) {
  //add = obj[j].valeur
  //}
  //}
  //return result.push(add)
  //}
  function convertToRoman(num) {
    var castStringParam = void 0,
        obj = {},
        add = '',
        result = [],
        arrRomanOne = [{ key: 1, valeur: 'I' }, { key: 2, valeur: 'II' }, { key: 3, valeur: 'III' }, { key: 4, valeur: 'IV' }, { key: 5, valeur: 'V' }, { key: 6, valeur: 'VI' }, { key: 7, valeur: 'VII' }, { key: 8, valeur: 'VIII' }, { key: 9, valeur: 'IX' }],
        arrRomanTwo = [{ key: 1, valeur: 'X' }, { key: 2, valeur: 'XX' }, { key: 3, valeur: 'XXX' }, { key: 4, valeur: 'XL' }, { key: 5, valeur: 'L' }, { key: 6, valeur: 'LX' }, { key: 7, valeur: 'LXX' }, { key: 8, valeur: 'LXXX' }, { key: 9, valeur: 'XC' }],
        arrRomanThree = [{ key: 1, valeur: 'C' }, { key: 2, valeur: 'CC' }, { key: 3, valeur: 'CCC' }, { key: 4, valeur: 'CD' }, { key: 5, valeur: 'D' }, { key: 6, valeur: 'DC' }, { key: 7, valeur: 'DCC' }, { key: 8, valeur: 'DCCC' }, { key: 9, valeur: 'CM' }],
        arrRomanFour = [{ key: 1, valeur: 'M' }, { key: 2, valeur: 'MM' }, { key: 3, valeur: 'MMM' }, { key: 4, valeur: 'MMMM' }, { key: 5, valeur: 'M' }, { key: 6, valeur: 'M' }, { key: 7, valeur: 'M' }, { key: 8, valeur: 'M' }, { key: 9, valeur: 'M' }];
    castStringParam = num.toString();
    castStringParam.split('').reverse().map(function (a, i) {

      //console.log(a, i);
      if (i === 0) {
        //oneNumber(a, arrRomanOne )
        for (var j = 0; j < arrRomanOne.length; j++) {
          //console.log(arrRomanOne[j].key +' : '+ arrRomanOne[j].valeur+' : '+j+' : '+num);
          if (arrRomanOne[j].key == a) {
            add = arrRomanOne[j].valeur;
            return result.push(add);
          }
        }
      } else if (i == 1) {
        //oneNumber(a, arrRomanTwo)
        for (var _j = 0; _j < arrRomanTwo.length; _j++) {
          //console.log(arrRomanTwo[j].key +' : '+ arrRomanTwo[j].valeur+' : '+j+' : '+a);
          if (arrRomanTwo[_j].key == a) {
            add = arrRomanTwo[_j].valeur;
            return result.push(add);
          }
        }
      } else if (i == 2) {
        //oneNumber(a, arrRomanThree )
        for (var _j2 = 0; _j2 < arrRomanThree.length; _j2++) {
          //console.log(arrRomanThree[j].key +' : '+ arrRomanThree[j].valeur+' : '+j+' : '+a);
          //console.log(a , i,j);
          if (arrRomanThree[_j2].key == a) {
            add = arrRomanThree[_j2].valeur;
            return result.push(add);
          }
        }
      } else if (i == 3) {
        //oneNumber(a, arrRomanFour )
        for (var _j3 = 0; _j3 < arrRomanFour.length; _j3++) {
          //console.log(arrRomanThree[j].key +' : '+ arrRomanThree[j].valeur+' : '+j+' : '+a);
          //console.log(a , i,j);
          if (arrRomanFour[_j3].key == a) {
            add = arrRomanFour[_j3].valeur;
            return result.push(add);
          }
        }
      }
    });
    //console.log(result = result.reverse().join(''));
    result = result.reverse().join('').toString();
    //console.log(typeof result);
    console.log(result);
    return result;
  }
  convertToRoman(649);
})(window);
//# sourceMappingURL=Roman-Numeral-Converter.js.map
//# sourceMappingURL=data:application/json;base64,
